name: Build, Scan, and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch:

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
  SONAR_AUTOMATIC_ANALYSIS: ${{ vars.SONAR_AUTOMATIC_ANALYSIS }}
  DOCKER_PLATFORMS: ${{ vars.DOCKER_PLATFORMS || 'linux/arm64' }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: 20

jobs:
  sonar:
    name: Sonar Quality Scan
    runs-on: ubuntu-latest
    environment: prd
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_AUTOMATIC_ANALYSIS: ${{ secrets.SONAR_AUTOMATIC_ANALYSIS }}
    steps:
      - name: Skip Sonar when token missing
        if: ${{ env.SONAR_TOKEN == '' }}
        run: echo "SONAR_TOKEN is empty; skipping SonarCloud analysis."

      - name: Skip Sonar when automatic analysis enabled
        if: ${{ env.SONAR_AUTOMATIC_ANALYSIS == 'true' }}
        run: echo "Automatic analysis flag set; skipping CI Sonar scan."

      - name: Checkout repository
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_AUTOMATIC_ANALYSIS != 'true' }}
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4

      - name: Set up Node.js
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_AUTOMATIC_ANALYSIS != 'true' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020  # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_AUTOMATIC_ANALYSIS != 'true' }}
        run: npm install

      - name: Build for analysis
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_AUTOMATIC_ANALYSIS != 'true' }}
        run: npm run build --if-present

      - name: Sonar analysis
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_ORGANIZATION != '' && env.SONAR_PROJECT_KEY != '' && env.SONAR_AUTOMATIC_ANALYSIS != 'true' }}
        uses: sonarsource/sonarcloud-github-action@e44258b109568baa0df60ed515909fc6c72cba92  # v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >-
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.sources=src
  build-and-deploy:
    name: Build and Deploy to S3
    runs-on: ubuntu-latest
    environment: prd
    env:
      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    permissions:
      contents: read
      id-token: write
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955  # v4

      - name: Set up Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020  # v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Resolve AWS role ARN
        id: role-arn
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        shell: bash
        env:
          ROLE_INPUT: ${{ env.AWS_ROLE_TO_ASSUME }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euo pipefail

          role_input="${ROLE_INPUT}"
          if [[ "${role_input}" == arn:aws:iam::* ]]; then
            echo "arn=${role_input}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ -z "${ACCOUNT_ID}" ]]; then
            echo "AWS account ID secret is required when providing a role name" >&2
            exit 1
          fi

          role_path="${role_input#role/}"
          echo "arn=arn:aws:iam::${ACCOUNT_ID}:role/${role_path}" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' && steps.role-arn.outputs.arn != '' }}
        uses: aws-actions/configure-aws-credentials@50ac8dd1e1b10d09dac7b8727528b91bed831ac0  # v3
        with:
          role-to-assume: ${{ steps.role-arn.outputs.arn }}
          role-session-name: curveFitterUiDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' && steps.role-arn.outputs.arn != '' }}
        shell: bash
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET || 'curve-fitter-ui' }}
        run: |
          set -euo pipefail
          aws s3 sync dist/ "s3://${S3_BUCKET}/" --delete --cache-control "public, max-age=31536000, immutable"
          aws s3 cp "s3://${S3_BUCKET}/index.html" "s3://${S3_BUCKET}/index.html" --cache-control "public, max-age=0, must-revalidate" --metadata-directive REPLACE
          echo "Successfully deployed to S3 bucket: ${S3_BUCKET}"
